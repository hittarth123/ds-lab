#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* nthNodeFromEnd(Node* head, int n) {
    if (head == nullptr || n <= 0) {
        return nullptr;
    }

    Node* slow = head;
    Node* fast = head;

    for (int i = 0; i < n; ++i) {
        if (fast == nullptr) {
            return nullptr; // n is greater than the length of the list
        }
        fast = fast->next;
    }

    while (fast != nullptr) {
        slow = slow->next;
        fast = fast->next;
    }

    return slow;
}

int main() {
    Node* head = new Node{1, nullptr};
    head->next = new Node{2, nullptr};
    head->next->next = new Node{3, nullptr};
    head->next->next->next = new Node{4, nullptr};
    head->next->next->next->next = new Node{5, nullptr};

    int n = 2;
    Node* nthNode = nthNodeFromEnd(head, n);
    if (nthNode != nullptr) {
        cout << "Nth Node from the End: " << nthNode->data << endl;
    } else {
        cout << "Invalid input for Nth node." << endl;
    }

    // Clean up: Delete the nodes to free memory
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
