#include <iostream>
#include <vector>
using namespace std;

int findFloor(vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1, floor = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] <= target) {
            floor = mid;
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return floor;
}

int findCeil(vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1, ceil = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] >= target) {
            ceil = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return ceil;
}

int findPeak(vector<int>& nums) {
    int left = 0, right = nums.size() - 1;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] > nums[mid + 1]) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
}

int findMinimum(vector<int>& nums) {
    int left = 0, right = nums.size() - 1;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] > nums[right]) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return nums[left];
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    int target = 3;
    
    int floorIndex = findFloor(nums, target);
    int ceilIndex = findCeil(nums, target);
    int peakIndex = findPeak(nums);
    int minimumElement = findMinimum(nums);
    
    cout << "Floor index: " << floorIndex << endl;
    cout << "Ceil index: " << ceilIndex << endl;
    cout << "Peak element index: " << peakIndex << endl;
    cout << "Minimum element: " << minimumElement << endl;
    
    return 0;
}
